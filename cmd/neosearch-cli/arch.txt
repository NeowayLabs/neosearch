NeoSearch - Neoway Full Text Search Index
==========================================

Proposal of a new buzzwords-complete solution to big data!

Features
==========

* Schemaless
* Sharding
* Replicas
* Rest API
* Spatial Index

Indexed Documents
==================

Indexed with key/value data storage.
```
Example document 1:
{
  id: 1,
  name: "Hello NeoSearch",
  title: "NeoSearch - High Performance Distributed Search Index"
}
```
# Using the REST to create the document 1
POST /index/example.idx/

Will result for name.idx index:
```
neosearch> using name.idx MERGESET "hello" 1
hello: [1]
neosearch> using name.idx MERGESET "neosearch" 1
neosearch: [1]
```
Will result for title.idx index:
```
neosearch> using title.idx MERGESET "neosearch" 1
neosearch: [1]
neosearch> using title.idx MERGESET "high"
high: [1]
neosearch> using title.idx MERGESET "performance" 1
performance: [1]
neosearch: using title.idx MERGESET "distributed" 1
distributed: [1]
neosearch> using title.idx MERGESET "search" 1
search: [1]
neosearch> using title.idx MERGESET "index" 1
index: [1]
```
Lets index a new document:

Example document 2:
```
{
  id: 2,
  name: "Do we need the Paxos algorithm for master-slave election consensus on NeoSearch?",
  title: "NeoSearch - Buzz-words complete index solution"
}
```

# Save the document 2
POST /index/example.idx

Will result for name.idx index (example for a English analyser):
```
neosearch> using name.idx MERGESET "need" 2
need: [2]
neosearch> using name.idx MERGESET "paxos" 2
paxos: [2]
neosearch> using name.idx MERGESET "algorithm" 2
paxos: [2]
neosearch> using name.idx MERGESET "master-slave" 2
master-slave: [2]
neosearch> using name.idx MERGESET "election" 2
election: [2]
neosearch> using name.idx MERGESET "consensus" 2
consensus: [2]
neosearch> using name.idx MERGESET "neosearch" 2
neosearch: [1, 2] // HEY, LOOK THE MERGESET here!!
```
Then, store the document:
```
neosearch> using document.db SET 2 "{
  id: 2,
  name: "Do we need the Paxos algorithm for master-slave election consensus on NeoSearch?",
  title: "NeoSearch - Buzz-words complete index solution"
}"
```

After the two documents indexed we have (ignoring the "id" field fow now):
```bash
$ ls /neosearch_data/indexes/
example.idx
```
```bash
$ ls /neosearch_data/indexes/example.idx/
metadata.json name.idx title.idx document.db
```
# Retrieving documents by shard-id
```
neosearch> using document.db GET 1
{
  document: {
    id: 1,
    name: "Hello NeoSearch",
    title: "NeoSearch - High Performance Distributed Search Index"
  }
}
```
# NeoSearch Key/Value datastore interface
Low-level searching documents in index using the key/value interface. This is much closer to the pure key-value interface.
```
neosearch> using index id.idx GET 1
{
  results: 1
  documents: [1]
}
```
```
neosearch> using index name.idx GET "test"
{
  results: 0
}
```
```
neosearch> using index name.idx GET "hello"
{
  results: 1,
  documents: [1],
  highlight: {
    "1": {
      start: 0,
      end: 4
    }
  }
}
```
```
neosearch> using index name.idx GET "NeoSearch"
{
  results: 2,
  documents: [1,2],
  highlight: {
    "1": {
      start: 6,
      end: 15
    },
    "2": {
      start: 70,
      end: 79
    }
}
```
```
neosearch> using index title.idx GET "buzz-words"
{
  results: 1,
  documents: [2],
  highlight: {
    "2": {
      start: 12,
      end: 22
    }
}
```
# Algorithm for query operations

### AND algorithm

High-level query DSL search:
```
GET /search/example.idx
{
  query: {
    group: {
      operator: "AND" 
      filters: [
        {name: "hello"},
        {title: "buzz-words"}
      ]
    },
    operator: "OR",
    filters: [
      {name: "NeoSearch"}
    ]
  }
}
```
This query DSL will result in the query below:
```
(name: "hello" AND title: "buzz-words") OR name: "NeoSearch"
```
Each "group" field is a "parenthesized" subquery that need be searched in the specified order.

1- First the subquery get the documents that have "hello" from name.idx;
```
neosearch> using index name.idx GET "hello"
{
  results: 1,
  documents: [1],
  highlight: {
    "1": {
      start: 0,
      end: 4
    }
  }
}
```
2- Then get documents that have "buzz-words" from title.idx;
```
neosearch> using index title.idx GET "buzz-words"
{
  results: 1,
  documents: [2],
  highlight: {
    "2": {
      start: 12,
      end: 22
    }
}
```
After that, use the algorithms for union/merge/intersect the arrays to provide AND, OR, XOR, NOT, etc, in the results. 
## Basic Algorithm for AND-merge result sets;
```
name_docs = name_index.get("hello") // returns [1]
title_docs = title_index.get("buzz-words") // returns [2]
result_docs = array_intersects(name_docs, title_docs) // []
```
## Basic algorithm for OR-merge result-sets
```
name_docs = name_index.get("hello") // returns [1]
title_docs = title_index.get("buzz-words") // returns [2]
result_docs = array_union_uniques(name_docs, title_docs) // [1, 2]
```
Then for the query below:
```
(name: "hello" AND title: "buzz-words") OR name: "NeoSearch"
```
We have this algorithm:
```
name_docs = name_index.get("hello") // returns [1]
title_docs = title_index.get("buzz-words") // returns [2]
name2_docs = name_index.get("NeoSearch") // returns [1,2]
# first apply the AND operation
result_docs = array_intersects(name_docs, title_docs) // returns []
# Then, apply the OR in the results
result_docs = array_union_unique(result_docs, name2_docs) // returns [1, 2]
```

Sharding / Partitioning (TO BE DEFINED)
==================

The sharding should support *Routing* for single key-field, combined key-fields, document hash or timestamp.

Warning: The wrong architecture can fuck up everything...
Eg.: Data migration/realloc when shards entering the cluster? Problems....

Replication (TO BE DEFINED)
============

Every master can have one or more replicas. Each replica contains all of the indexed documents at the master node. The master node can be a shard, then the replicas will contains only the sharded data.

